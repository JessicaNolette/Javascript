Lodash is a JavaScript library that provides utility functions for common programming tasks 
using a functional programming paradigm; it builds upon the older underscore. js library. 
Lodash has several built-in utility functions that make coding in JavaScript easier and cleaner.


const _ = {

  clamp(number, lower, upper){
    var lowerClampedValue = Math.max(number, lower);
    var clampedValue = Math.min(lowerClampedValue, upper);
    return clampedValue;
  },

  inRange(number, start, end) {
    if (end === undefined) {
      end = start;
      start = 0; 
    } if (start > end) {
      var temp = end
      end = start;
      start = temp;
    }
    var isInRange = start <= number && number < end;
      return isInRange;
  },

  words(string){
    var words = string.split(' ');
    return words;
  },

  pad(string, length) {
        while(string.length < length) {
            string = string + ' ';
            if(string.length < length) string = ' ' + string;
        }
        return string;
    },
  
  has(object, key) {
    const hasValue = object[key];
      if (hasValue != undefined) {
        return true;
      }return false
    },  

  invert(object) {
    let invertedObject = {};
    for (let key in object) {
      const originalValue = object[key];
      invertedObject = {originalValue : key}
    }
    return invertedObject;
  },

  findKey(object, predicate) {
    for (let key in object) {
      let value = object[key];
      let predicateReturnValue = predicate(value);
      if(predicateReturnValue) {
        return key;
      };
    };
    undefined
    return undefined;
  },

  drop(array, n) {
    if (n === undefined) {
      n = 1;
    }
    let droppedArray = array.slice(n, array.length);
    return droppedArray;
  },

  dropWhile(array, predicate) {
    const cb = (element, index) => {
      return !predicate(element, index, array);
    };
    let dropNumber = array.findIndex(cb);
    let droppedArray = this.drop(array, dropNumber);
    return droppedArray;
    
  },

  chunk(array, size) {
    if (size === undefined) {
      size = 1
    }
    let arrayChunks = [];
    for (let i = 0; i < array.length; i+= size) {
      let arrayChunk  = array.slice(i, i + size);
      arrayChunks.push(arrayChunk);
    }
    return arrayChunks
  }
  

};

// Do not write or modify code below this line.
module.exports = _;
